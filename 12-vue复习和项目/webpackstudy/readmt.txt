vue全家桶：vue.js + vue-router + vuex + es6 + vue-cli + webpack + ui库

webpack也是属于vue技术栈，现在开发项目，基本上离不开webpack。

不会webpack，也是可以写项目的，webpack是前端比较高级的课程。

----------------------------------------
vue中的数据通信：
    1）props  发布订阅（自定义事件）  $parent  $children
    2）provide inject 
    3）eventbus
    4）vuex   

----------------------------------------
webpack：
    不光vue中脚手架是基于webpack的，react中的脚手架也是基于webpack。

----------------------------------------
传统写一个项目，你会发现项目中有很多资源：
    图片：
        png  jpg  gif  svg... 
    样式：
        css less sass...
    行为：
        js  ts   
    结构：
        html  html会引用很多样式和JS

传统开发项目就面临了一个问题：
    1）资源太多，不好管理 
    2）资源与资源之间的引用关系太乱
    3）项目上线时，把所有的资源都扔到服务器 

项目上线时，通常为了访问速度快一点，都会对html,css,js进行压缩。体积变小。
之前都是找一些网站，把代码copy进去，手动压缩。

再往后，前端中就出现了很多工具，如：grunt gulp fis....  我们利用这些工具就可以把代码进行压缩。

现在，有这么一个工具，叫webpack，基本上webpack就统一。

我说的压缩仅仅是这些工具一个小功能而已，总结webpack它就是一个打包器。webpak作用：
1）对代码进行压缩合并
2）把浏览器不能识别的代码，转成让浏览器识别  
3）解决依赖关系 
------ 相然，上面说的仅仅是webapck的冰山一角，还有如个的功能：
A）自动发布
B）代码检验  
C）自动刷新  
.... 
----------------------------------------
中文网：https://www.webpackjs.com/

开始使用：
    1）先进行项目的初始化  npm  init  -y
    2）要用这个工具，你就要安装这个工具： npm i webpack webpack-cli --save-dev  开发时需要用，项目上线后，就不需要了
    3）使用之
----------------------------------------
webpack不需要配置就可以使用，我们叫它零配置。默认情况下，webpack是零配置。
    webpack默认会把当前项目src目录下的文件进行打包编译，把src下面的index.js当成一个入口
    webpack会把打包好的代码放到dist目录下面

项目的目录结构：
    src   项目开发目录   项目源吗  不会扔到服务器
    dist  编译后的文件（打包后文件）--> 将来是要发布到服务器上

我们创建两个模块一个是A模块，一个是B模块，在A模块中定义一个加法，在B模块中定义一个减法。

webpack是基于node的，走的是commonjs模块化，不是ES6。

----------------------------------------
零配置如何打包：
    通过webpack命令就可以打包,在控制台输入webpack时，报错了： webpack: command not found

原因：
    如果一个模块装在全局中，就可以使用这个命令，如：nodemon   npm i nodemon -g 
    我们就可以使用nodemon server.js  

    现在我们的webpack并没有装到全局中，那你如何使用呢？
    答：1）npx webpack   如果全局中没有安装，它会把项目中安装的连接到全局中
        2）在package.json中配置一个命令  通过npm run xxx 也是OK
        "scripts": {
            "serve": "webpack"
        },
----------------------------------------
自己配置webpack:
    上面的零配置，非常弱。学习webpack就是在学习一堆配置，配置大神。

如何配置：
    在项目的根目录下面，创建一个webpack.config.js，把所有的配置写在这个文件中

----------------------------------------
为什么通过vue脚手架创建的项目没有webpack.config.js？
答：vuecli2.x版本中是有这个配置文件，在vuecli3.x  4.x中隐藏了这个配置文件
    如果说你想基于vuecli的配置上再进行配置，可以创建一个vue.config.js。 
    打包的时候，它会把vue.config.js中的配置合并到它内部的webpack.config.js中去。

    通常可以在vue.config.js中配置跨域。
----------------------------------------
复习一下上次的webpack:
    1) 什么是webpack? webpack有什么用？
    答：webpack是一个打包器。作用比较多，如：把代码进行压缩合并，解决项目代码依赖关系....

    2）打包分两种？
    答：1）开发时进行打包（在内存） 2）项目开发完毕，需要在硬盘上打包 

    3）wepack零配置？
    答：只需要安装webpack和webpack-cli两个模块，就可以对项目进行打包，通过webpack命令。
        如果说webpack是全局安装的，那么就直接使用这个命令就OK了，如果是本地安装的，可以使用
        如下两种方式使用webpack命令：
        1）npx webpack  
        2）在package.json中配置一个命令   通过npm run xxx 

    4）我们学习webpck的目标？
    答：刚入门时，也就是玩玩而已，工作中对于刚入门的，不会让我自己配置webpack。
        我们学习webpack最终的目标就是脱离vue或react脚手架，自己搭建一个vue或react的开发环境。

    5）自己配置？
    答：webpack可以配置的东西非常多，通常不好记，你理解了，下去自己配两遍，针对webpack准备一些面试题。
        入口   src/main.js 
        出口   dist/build.js 

----------------------------------------
打包（编译）模式，分两种：
    1）开发模式打包（我们开发过程需要不断地打包（.vue文件浏览器不认识，就需要通过打包让浏览器认识））
        通常开发模式打包，是把包打包到内存（npm run serve 打好包了，包存在内存中，把内存中的包通过express托管起来，提供一个url，通过url访问内存中的项目）。
        至于如何在内存中打上一个包，通过一个url访问呢？先不说  .vue 
    2）生产模式打包（项目开发完毕了，就打包生成一个dist目录，dist目录就是我们项目要上线的文件夹）

    开发模式打包 打包出来的文件不会压缩 方便我们读取。  开发模式打的包叫bundle.js 
    生产模式打包 代码都是压缩过的 上线时只可以减小体积。生产模式打的包通常叫bundle.min.js 

怎么指定是开发模式打包，还是生产模式打包？
答：通过mode  值有两个  一个是development(开发)   production（生产） 
    如果没有配置mode，默认就是生产模式。

----------------------------------------
缓存问题：
    第一次打包，生成一个bundle.js，在index.html引入bundle.js文件，页面加载，它会把bundle.js缓存到浏览器本地。
    这是浏览器的缓存机制。当我们又重新打包了，由于文件名还是bundle.js，浏览器就可能从缓存中获取，因为浏览器发现
    这个bundle.js，在浏览器的缓存中有，缓存中有，就走缓存。从缓存中获取上一次打包的结果。

怎么解决缓存问题：
    之所以有缓存是由于文件名或url名是一样的，只有一样了，浏览器才会偷懒，从缓存中获取资源，如果
    url名或文件名不一样，肯定不会走缓存，浏览器会当成一个新资源。
    解决办法：打包时 指定 出口 文件名每一次都不一样。

在webpack中有一个hash的东西：
    hash可以保存每一次的值都是不一样的。
    filename:"bundle.[hash].js",  这样定，每一次生成的打包后文件名就不一样了。
----------------------------------------
根据不同的模式，可以写两套配置：
    一套是针对开发模式的配置
    一套是针对生模式的配置

就是写两个配置文件，如下：
    webpack.config.development.js  针对开发配置
    webpack.config.production.js  针对生产的配置

然后，可以在package.json中配置两个命令如下：
"scripts": {
    "serve": "webpack --config webpack.config.development.js",
    "build": "webpack --config webpack.config.production.js"
},

还可以把生产和开发相同的配置抽离出来，也就是说写三份配置：
    1）开发和生产中都有的配置
    2）开发相关的配置
    3）生产相关的配置

通过webpack命令webpack通过把打包好的代码生成到硬盘上的。

----------------------------------------
webpack的缺点：
    大 

如果就想对js进行打包处理,vue.js rollup 
----------------------------------------
现在我们面临这一样一个问题：
    1）打包生成的js，需要手动引入到index.html 
    2）第一次打包，都会生成一个新的文件，老文件没一点用了，但是还在，我们想能不能在打一个新包的时候，把老包都删除掉。是有这样一个插件的。叫：clean-webpack-plugin
    3）能不能直接打包到内存中，这样速度就非常快，通过一个服务器把内存中打好的包托管起来，通过一个url就可以访问内存中的项目，也是有一个模块，叫：webpack-dev-server 

解决办法：可以使用一个插件叫，html-webpack-plugin

在配置webpack的时候，需要借助很多第三方插件或模块或loader。

----------------------------------------
html-webpack-plugin：
    作用：1）根据一个html模板在内存中生成一个相同的html
          2）把内存中的打包好的js插入到内存中Html最后面

----------------------------------------
clean-webpack-plugin： 
    作用：把之前老的打包好的模块删除掉，仅仅留下最新打包的。

----------------------------------------
webpack-dev-server:
    作用：开发模式下，直接在内存中打包，速度快，使用epxress服务器托管起来，直接访问内存中的项目。
          自动监听代码是否改变了，如果代码改变了，自动在内存中打包。
          帮我们自己打开浏览器
          ...
        
    vue中代理跨域也是基于这个webpack-dev-server。

运行webpack-dev-server 就是在内存中打包。
----------------------------------------
要使用上面的三个模块，肯定是要安装，问：安装成开发依赖？还是安装成生产依赖？
答：npm i html-webpack-plugin clean-webpack-plugin webpack-dev-server -D 

----------------------------------------
最终它要在内存中打包好一个js模块，这个模块可以插件到html中，使用html-webpack-plugin，
就可以根据一个模板在内存中生成一个html文件，我们就把内存中的js插件到内存中的html文件中。

我们只需要指定一个html模板就OK了，html-webpack-plugin就可以根据这个模板在内存中生成一个html文件。
webpack-dev-server就可以帮我们在内存中打包好一个js文件，html-webpack-plugin又可以把内存中的js插入到
内存中的Html中。

----------------------------------------
webpack-dev-server:
    之前是通过webpack命令 这个命令是打包到硬盘上的
    现在使用webpack-dev-server命令，它可以把包打包到内存中

"scripts": {
    "serve": "webpack-dev-server",  // npm run serve 是打包到内存中
    "build": "webpack"  // npm run build  是打包到硬盘上
  },

----------------------------------------
通常css写在什么地方：
    1）在html文件中写入
    2）写在css文件中
    3）在spa应用中，我们是在入口中引入css

    在工程化项目中 css不是在Html中导入 通常也是在js入口中导入
----------------------------------------
在入口js导入了css文件，报错了，为什么？
答：默认情况下，webpack不能识别css代码。

你想让webpack处理css代码，那么你需要使用loader（加载器）把css代码转化可以让webapck识别的代码。
----------------------------------------
loader:
    loader就是一个翻译官，可以把webpack不识别的代码翻译成webpack可以识别的代码。

针对不同的文件类型，有不同的loader，对于css处理，有两个loader,一个是style-loader， 一个是css-loader。 
----------------------------------------
style-loader css-loader 怎么使用？ 
答：loader也是第三方模块，使用时，需要安装。

安装：npm i css-loader style-loader -D 

只有开发时，才会使用到这些loader，项目要上线的，打包完后的代码就是html,css,js进行压缩。体积变小。

如写代码使用less写时，那我们需要使用less-loader把less代码转化成css代码。项目上线，less-loader就不需要了，所以安装的时候，是安装成开发依赖。
----------------------------------------
loader安装完后，需要在webpack.config.js中配置。如下：
    module:{  // 配置加载器--loader
        rules:[  // 模块规则：使用加载器（默认是从右向左执行，从下向上）
            {
                test:/\.css$/,
                use:["style-loader","css-loader"]
            }
        ]
    }
----------------------------------------

css-loader的作用：把css代码转化成可以让webpack识别的代码。
style-loader的作用：接收css-loader处理的结果，把css插入到head标签中。

----------------------------------------
如果写了less代码，webpack默认也是不认识的，需要一个合适的loader来处理。
loader就是翻译官，如果把less代码翻译成css代码，由于我们面面配置了css-loader。
也就是说只需要把less转成css就OK了。

怎么把一个less代码转成css代码？
答：通过less-loader就可以转化。
----------------------------------------
先安装less-loader，如下：
npm i less less-loader -D 

然后配置less，配置如下：
    module:{  // 配置加载器--loader
        rules:[  // 模块规则：使用加载器（默认是从右向左执行，从下向上）
            {
                test:/\.(css|less)$/i,  // js中的正则表达式  各位哪天抽空去找个文档看一下
                use:["style-loader","css-loader","less-loader"]
            }
        ]
    }

同理：如果你使用sass来写样式，webpack也是不认识的，你也需要通过laoder进行处理。
     如果你使用stylus来写样式，也是一样的。
----------------------------------------
还有一个loader也比较常用，叫postcss-loader，用来给css3中属性添加前缀的。
css3中的属性为了兼容性，通常需要前缀，可以使用postcss-loader，自动帮我们
添加前缀，也就是说我们只需要写一次css3属性，打包时，它会自动帮我们加上前缀。

安装：
    npm i postcss-loader autoprefixer -D 

autoprefixer是postcss-loader的插件 
postcss-loader  处理css的loader 


----------------------------------------
针对postcss-loader，这个loader还有很多插件，autoprefixer就是
postcss-loader的插件。我们需要创建postcss.config.js，在这个js
文件中引入你要使用的插件。如下：

----------------------------------------
上面的配置，是把css处理成了内部样式，但是我们项目中通常是抽离成外部样式，vue脚手架，它通过npm run build打包出来的
就是一个css文件夹，也就是把css抽离出去了。

为什么需要抽离？
答：不抽离也可以。通过vuecli创建的项目，然后通过npm run build 进行打包 生成的目录结构
    |-js 
    |-css 
    |-images
    index.html  

如果不抽离，那么打包好的是把css放到了html中的，导致html文件非常大，web的三层结构。

怎么抽离？
答：npm i mini-css-extract-plugin -D  

----------------------------------------
项目上线时，需要把css,js压缩处理，让它的体积变的非常小。 也是使用几个插件来实现的。
压缩css:
    optimize-css-assets-webpack-plugin
压缩js:
    uglifyjs-webpack-plugin

使用production模式，默认情况下，就把js压缩了，但是你如果使用optimize-css-assets-webpack-plugin压缩了css。
那么即使在production模式，js也不压缩，需要通过uglifyjs-webpack-plugin。

安装：  
    npm i optimize-css-assets-webpack-plugin uglifyjs-webpack-plugin -D
----------------------------------------
webapck处理图片：
    默认情况下，webpack不能处理图片，靠loader。
    file-loader 
    url-loader  url-loader是比file-loader强一点loader 

安装：npm i file-loader url-laoader -D   

项目中什么时候用到图片：
    1）html中<img>
    2) css中背景图
    3）js中也可以创建一个图片  Image()   let img = new Image()   img.src = "xxx"
----------------------------------------
webapck到底认识什么？
答：默认情况下，它只认识低级的js代码。 高级一点的js代码就处理不了，如class，let [a,b] = [1,2]... 

----------------------------------------
要学习webpack，你需要会一点node，会一点正则表达式。

----------------------------------------
 file-loader  和 url-loader 不同？
 答：大家自己查一下。 url-loader比file强大。
    使用url-loader可以把图片转成base64编码（字符串）
----------------------------------------
作业：
    1）如果项目中有.vue文件，怎么让webpack识别.vue文件   "vue-loader"
    2）使用vue-cli创建一个项目  配置代理跨域   没有cors

        你使用express创建一个项目  不要配置cors   写一个接口 
        使用vue-cli创建一个项目，安装axios，请求你的接口，此时肯定有跨域问题 
        怎么解决： 
            1）cors  后端做 
            2）代理   需要配置webpack中的dev-server  你需要配置  在项目的根目录下面创建一个vue.config.js 
            3）json 

----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------









































