vue全家桶：vue.js + vue-router + vuex + es6 + vue-cli + webpack + ui库

----------------------------------------
vue中的数据通信：
    1）props  发布订阅（自定义事件）  $parent  $children
    2）provide inject 
    3）eventbus
    4）vuex   

----------------------------------------
webpack：
    不光vue中脚手架是基于webpack的，react中的脚手架也是基于webpack。

----------------------------------------
传统写一个项目，你会发现项目中有很多资源：
    图片：
        png  jpg  gif  svg... 
    样式：
        css less sass...
    行为：
        js  ts   
    结构：
        html  html会引用很多样式和JS

传统开发项目就面临了一个问题：
    1）资源太多，不好管理 
    2）资源与资源之间的引用关系太乱
    3）项目上线时，把所有的资源都扔到服务器 

项目上线时，通常为了访问速度快一点，都会对html,css,js进行压缩。体积变小。
之前都是找一些网站，把代码copy进去，手动压缩。

再往后，前端中就出现了很多工具，如：grunt gulp fis....  我们利用这些工具就可以把代码进行压缩。

现在，有这么一个工具，叫webpack，基本上webpack就统一。

我说的压缩仅仅是这些工具一个小功能而已，总结webpack它就是一个打包器。webpak作用：
1）对代码进行压缩合并
2）把浏览器不能识别的代码，转成让浏览器识别  
3）解决依赖关系 
------ 相然，上面说的仅仅是webapck的冰山一角，还有如个的功能：
A）自动发布
B）代码检验  
C）自动刷新  
.... 
----------------------------------------
中文网：https://www.webpackjs.com/

开始使用：
    1）先进行项目的初始化  npm  init  -y
    2）要用这个工具，你就要安装这个工具： npm i webpack webpack-cli --save-dev  开发时需要用，项目上线后，就不需要了
    3）使用之
----------------------------------------
webpack不需要配置就可以使用，我们叫它零配置。默认情况下，webpack是零配置。
    webpack默认会把当前项目src目录下的文件进行打包编译，把src下面的index.js当成一个入口
    webpack会把打包好的代码放到dist目录下面

项目的目录结构：
    src   项目开发目录   项目源吗  不会扔到服务器
    dist  编译后的文件（打包后文件）--> 将来是要发布到服务器上

我们创建两个模块一个是A模块，一个是B模块，在A模块中定义一个加法，在B模块中定义一个减法。

webpack是基于node的，走的是commonjs模块化，不是ES6。

----------------------------------------
零配置如何打包：
    通过webpack命令就可以打包,在控制台输入webpack时，报错了： webpack: command not found

原因：
    如果一个模块装在全局中，就可以使用这个命令，如：nodemon   npm i nodemon -g 
    我们就可以使用nodemon server.js  

    现在我们的webpack并没有装到全局中，那你如何使用呢？
    答：1）npx webpack   如果全局中没有安装，它会把项目中安装的连接到全局中
        2）在package.json中配置一个命令  通过npm run xxx 也是OK
        "scripts": {
            "serve": "webpack"
        },
----------------------------------------
自己配置webpack:
    上面的零配置，非常弱。学习webpack就是在学习一堆配置，配置大神。

如何配置：
    在项目的根目录下面，创建一个webpack.config.js，把所有的配置写在这个文件中

    
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------
----------------------------------------









































