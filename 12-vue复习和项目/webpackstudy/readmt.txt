vue全家桶：vue.js + vue-router + vuex + es6 + vue-cli + webpack + ui库

----------------------------------------
vue中的数据通信：
    1）props  发布订阅（自定义事件）  $parent  $children
    2）provide inject 
    3）eventbus
    4）vuex   

----------------------------------------
webpack：
    不光vue中脚手架是基于webpack的，react中的脚手架也是基于webpack。

----------------------------------------
传统写一个项目，你会发现项目中有很多资源：
    图片：
        png  jpg  gif  svg... 
    样式：
        css less sass...
    行为：
        js  ts   
    结构：
        html  html会引用很多样式和JS

传统开发项目就面临了一个问题：
    1）资源太多，不好管理 
    2）资源与资源之间的引用关系太乱
    3）项目上线时，把所有的资源都扔到服务器 

项目上线时，通常为了访问速度快一点，都会对html,css,js进行压缩。体积变小。
之前都是找一些网站，把代码copy进去，手动压缩。

再往后，前端中就出现了很多工具，如：grunt gulp fis....  我们利用这些工具就可以把代码进行压缩。

现在，有这么一个工具，叫webpack，基本上webpack就统一。

我说的压缩仅仅是这些工具一个小功能而已，总结webpack它就是一个打包器。webpak作用：
1）对代码进行压缩合并
2）把浏览器不能识别的代码，转成让浏览器识别  
3）解决依赖关系 
------ 相然，上面说的仅仅是webapck的冰山一角，还有如个的功能：
A）自动发布
B）代码检验  
C）自动刷新  
.... 
----------------------------------------
中文网：https://www.webpackjs.com/

开始使用：
    1）先进行项目的初始化  npm  init  -y
    2）要用这个工具，你就要安装这个工具： npm i webpack webpack-cli --save-dev  开发时需要用，项目上线后，就不需要了
    3）使用之
----------------------------------------
webpack不需要配置就可以使用，我们叫它零配置。默认情况下，webpack是零配置。
    webpack默认会把当前项目src目录下的文件进行打包编译，把src下面的index.js当成一个入口
    webpack会把打包好的代码放到dist目录下面

项目的目录结构：
    src   项目开发目录   项目源吗  不会扔到服务器
    dist  编译后的文件（打包后文件）--> 将来是要发布到服务器上

我们创建两个模块一个是A模块，一个是B模块，在A模块中定义一个加法，在B模块中定义一个减法。

webpack是基于node的，走的是commonjs模块化，不是ES6。

----------------------------------------
零配置如何打包：
    通过webpack命令就可以打包,在控制台输入webpack时，报错了： webpack: command not found

原因：
    如果一个模块装在全局中，就可以使用这个命令，如：nodemon   npm i nodemon -g 
    我们就可以使用nodemon server.js  

    现在我们的webpack并没有装到全局中，那你如何使用呢？
    答：1）npx webpack   如果全局中没有安装，它会把项目中安装的连接到全局中
        2）在package.json中配置一个命令  通过npm run xxx 也是OK
        "scripts": {
            "serve": "webpack"
        },
----------------------------------------
自己配置webpack:
    上面的零配置，非常弱。学习webpack就是在学习一堆配置，配置大神。

如何配置：
    在项目的根目录下面，创建一个webpack.config.js，把所有的配置写在这个文件中

    
----------------------------------------
复习一下上次的webpack:
    1) 什么是webpack? webpack有什么用？
    答：webpack是一个打包器。作用比较多，如：把代码进行压缩合并，解决项目代码依赖关系....

    2）打包分两种？
    答：1）开发时进行打包（在内存） 2）项目开发完毕，需要在硬盘上打包 

    3）wepack零配置？
    答：只需要安装webpack和webpack-cli两个模块，就可以对项目进行打包，通过webpack命令。
        如果说webpack是全局安装的，那么就直接使用这个命令就OK了，如果是本地安装的，可以使用
        如下两种方式使用webpack命令：
        1）npx webpack  
        2）在package.json中配置一个命令   通过npm run xxx 

    4）我们学习webpck的目标？
    答：刚入门时，也就是玩玩而已，工作中对于刚入门的，不会让我自己配置webpack。
        我们学习webpack最终的目标就是脱离vue或react脚手架，自己搭建一个vue或react的开发环境。

    5）自己配置？
    答：webpack可以配置的东西非常多，通常不好记，你理解了，下去自己配两遍，针对webpack准备一些面试题。
        入口   src/main.js 
        出口   dist/build.js 

----------------------------------------
打包（编译）模式，分两种：
    1）开发模式打包（我们开发过程需要不断地打包（.vue文件浏览器不认识，就需要通过打包让浏览器认识））
        通常开发模式打包，是把包打包到内存（npm run serve 打好包了，包存在内存中，把内存中的包通过express托管起来，提供一个url，通过url访问内存中的项目）。
        至于如何在内存中打上一个包，通过一个url访问呢？先不说
    2）生产模式打包（项目开发完毕了，就打包生成一个dist目录，dist目录就是我们项目要上线的文件夹）

    开发模式打包 打包出来的文件不会压缩 方便我们读取。  开发模式打的包叫bundle.js 
    生产模式打包 代码都是压缩过的 上线时只可以减小体积。生产模式打的包通常叫bundle.min.js 

怎么指定是开发模式打包，还是生产模式打包？
答：通过mode  值有两个  一个是development(开发)   production（生产） 
    如果没有配置mode，默认就是生产模式。

----------------------------------------
缓存问题：
    第一次打包，生成一个bundle.js，在index.html引入bundle.js文件，页面加载，它会把bundle.js缓存到浏览器本地。
    这是浏览器的缓存机制。当我们又重新打包了，由于文件名还是bundle.js，浏览器就可能从缓存中获取，因为浏览器发现
    这个bundle.js，在浏览器的缓存中有，缓存中有，就走缓存。从缓存中获取上一次打包的结果。

怎么解决缓存问题：
    之所以有缓存是由于文件名或url名是一样的，只有一样了，浏览器才会偷懒，从缓存中获取资源，如果
    url名或文件名不一样，肯定不会走缓存，浏览器会当成一个新资源。
    解决办法：打包时 指定 出口 文件名每一次都不一样。

在webpack中有一个hash的东西：
    hash可以保存每一次的值都是不一样的。
    filename:"bundle.[hash].js",  这样定，每一次生成的打包后文件名就不一样了。
----------------------------------------
根据不同的模式，可以写两套配置：
    一套是针对开发模式的配置
    一套是针对生模式的配置

就是写两个配置文件，如下：
    webpack.config.development.js  针对开发配置
    webpack.config.production.js  针对生产的配置

然后，可以在package.json中配置两个命令如下：
"scripts": {
    "serve": "webpack --config webpack.config.development.js",
    "build": "webpack --config webpack.config.production.js"
},

还可以把生产和开发相同的配置抽离出来，也就是说写三份配置：
    1）开发和生产中都有的配置
    2）开发相关的配置
    3）生产相关的配置

----------------------------------------
webpack的缺点：
    大 

如果就想对js进行打包处理,vue.js rollup 
----------------------------------------
现在我们面临这一样一个问题：
    1）打包生成的js，需要手动引入到index.html 
    2）第一次打包，都会生成一个新的文件，老文件没一点用了，但是还在，我们想能不能在打一个新包的时候，把老包都删除掉。是有这样一个插件的。叫：clean-webpack-plugin
    3）能不能直接打包到内存中，这样速度就非常快，通过一个服务器把内存中打好的包托管起来，通过一个url就可以访问内存中的项目，也是有一个模块，叫：webpack-dev-server 

解决办法：可以使用一个插件叫，html-webpack-plugin

在配置webpack的时候，需要借助很多第三方插件或模块或loader。

----------------------------------------
html-webpack-plugin：
    作用：1）根据一个html模板在内存中生成一个相同的html
          2）把内存中的打包好的js插入到内存中Html最后面

----------------------------------------
clean-webpack-plugin： 
    作用：把之前老的打包好的模块删除掉，仅仅留下最新打包的。

----------------------------------------
webpack-dev-server:
    作用：开发模式下，直接在内存中打包，速度快，使用epxress服务器托管起来，直接访问内存中的项目。
          自动监听代码是否改变了，如果代码改变了，自动在内存中打包。
          帮我们自己打开浏览器
          ...
----------------------------------------
要使用上面的三个模块，肯定是要安装，问：安装成开发依赖？还是安装成生产依赖？
答：npm i html-webpack-plugin clean-webpack-plugin webpack-dev-server -D 

----------------------------------------
最终它要在内存中打包好一个js模块，这个模块可以插件到html中，使用html-webpack-plugin，
就可以根据一个模板在内存中生成一个html文件，我们就把内存中的js插件到内存中的html文件中。

我们只需要指定一个html模板就OK了，html-webpack-plugin就可以根据这个模板在内存中生成一个html文件。
webpack-dev-server就可以帮我们在内存中打包好一个js文件，html-webpack-plugin又可以把内存中的js插入到
内存中的Html中。

----------------------------------------
webpack-dev-server:
    之前是通过webpack命令 这个命令是打包到硬盘上的
    现在使用webpack-dev-server命令，它可以把包打包到内存中

"scripts": {
    "serve": "webpack-dev-server",  // npm run serve 是打包到内存中
    "build": "webpack"  // npm run build  是打包到硬盘上
  },

----------------------------------------

----------------------------------------
----------------------------------------









































